# coding: utf-8

import pprint
import re  # noqa: F401
import warnings  # noqa: F401

import six


class ApiErrorResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {"request_id": "str", "error": "ApiError"}

    attribute_map = {"request_id": "RequestId", "error": "Error"}

    def __init__(self, request_id=None, error=None):  # noqa: E501
        """ApiErrorResponse - a model defined in Swagger"""  # noqa: E501

        self._request_id = None
        self._error = None
        self.discriminator = None

        if request_id is not None:
            self.request_id = request_id
        if error is not None:
            self.error = error

    @property
    def request_id(self):
        """Gets the request_id of this ApiErrorResponse.  # noqa: E501


        :return: The request_id of this ApiErrorResponse.  # noqa: E501
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this ApiErrorResponse.


        :param request_id: The request_id of this ApiErrorResponse.  # noqa: E501
        :type: str
        """

        self._request_id = request_id

    @property
    def error(self):
        """Gets the error of this ApiErrorResponse.  # noqa: E501


        :return: The error of this ApiErrorResponse.  # noqa: E501
        :rtype: ApiError
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ApiErrorResponse.


        :param error: The error of this ApiErrorResponse.  # noqa: E501
        :type: ApiError
        """

        self._error = error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(ApiErrorResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiErrorResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
