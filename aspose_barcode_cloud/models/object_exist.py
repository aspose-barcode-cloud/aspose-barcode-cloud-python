# coding: utf-8

import pprint
import re  # noqa: F401
import warnings  # noqa: F401

import six


class ObjectExist(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {"exists": "bool", "is_folder": "bool"}

    attribute_map = {"exists": "Exists", "is_folder": "IsFolder"}

    def __init__(self, exists=None, is_folder=None):  # noqa: E501
        """ObjectExist - a model defined in Swagger"""  # noqa: E501

        self._exists = None
        self._is_folder = None
        self.discriminator = None

        self.exists = exists
        self.is_folder = is_folder

    @property
    def exists(self):
        """Gets the exists of this ObjectExist.  # noqa: E501

        Indicates that the file or folder exists.  # noqa: E501

        :return: The exists of this ObjectExist.  # noqa: E501
        :rtype: bool
        """
        return self._exists

    @exists.setter
    def exists(self, exists):
        """Sets the exists of this ObjectExist.

        Indicates that the file or folder exists.  # noqa: E501

        :param exists: The exists of this ObjectExist.  # noqa: E501
        :type: bool
        """
        if exists is None:
            raise ValueError("Invalid value for `exists`, must not be `None`")  # noqa: E501

        self._exists = exists

    @property
    def is_folder(self):
        """Gets the is_folder of this ObjectExist.  # noqa: E501

        True if it is a folder, false if it is a file.  # noqa: E501

        :return: The is_folder of this ObjectExist.  # noqa: E501
        :rtype: bool
        """
        return self._is_folder

    @is_folder.setter
    def is_folder(self, is_folder):
        """Sets the is_folder of this ObjectExist.

        True if it is a folder, false if it is a file.  # noqa: E501

        :param is_folder: The is_folder of this ObjectExist.  # noqa: E501
        :type: bool
        """
        if is_folder is None:
            raise ValueError("Invalid value for `is_folder`, must not be `None`")  # noqa: E501

        self._is_folder = is_folder

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(ObjectExist, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ObjectExist):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
