# coding: utf-8

import pprint
import re  # noqa: F401
import warnings  # noqa: F401

import six


class CouponParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {"supplement_space": "float"}

    attribute_map = {"supplement_space": "SupplementSpace"}

    def __init__(self, supplement_space=None):  # noqa: E501
        """CouponParams - a model defined in Swagger"""  # noqa: E501

        self._supplement_space = None
        self.discriminator = None

        if supplement_space is not None:
            self.supplement_space = supplement_space

    @property
    def supplement_space(self):
        """Gets the supplement_space of this CouponParams.  # noqa: E501

        Space between main the BarCode and supplement BarCode in Unit value.  # noqa: E501

        :return: The supplement_space of this CouponParams.  # noqa: E501
        :rtype: float
        """
        return self._supplement_space

    @supplement_space.setter
    def supplement_space(self, supplement_space):
        """Sets the supplement_space of this CouponParams.

        Space between main the BarCode and supplement BarCode in Unit value.  # noqa: E501

        :param supplement_space: The supplement_space of this CouponParams.  # noqa: E501
        :type: float
        """

        self._supplement_space = supplement_space

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(CouponParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CouponParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
