# coding: utf-8

import pprint
import re  # noqa: F401
import warnings  # noqa: F401


class EncodeData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {"data_type": "EncodeDataType", "data": "str"}

    attribute_map = {"data_type": "dataType", "data": "data"}

    def __init__(self, data_type=None, data=None):  # noqa: E501
        """EncodeData - a model defined in Swagger"""  # noqa: E501

        self._data_type = None
        self._data = None
        self.discriminator = None

        if data_type is not None:
            self.data_type = data_type
        self.data = data

    @property
    def data_type(self):
        """Gets the data_type of this EncodeData.  # noqa: E501


        :return: The data_type of this EncodeData.  # noqa: E501
        :rtype: EncodeDataType
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this EncodeData.


        :param data_type: The data_type of this EncodeData.  # noqa: E501
        :type: EncodeDataType
        """

        self._data_type = data_type

    @property
    def data(self):
        """Gets the data of this EncodeData.  # noqa: E501

        String represents data to encode  # noqa: E501

        :return: The data of this EncodeData.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this EncodeData.

        String represents data to encode  # noqa: E501

        :param data: The data of this EncodeData.  # noqa: E501
        :type: str
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")  # noqa: E501
        if data is not None and len(data) < 1:
            raise ValueError("Invalid value for `data`, length must be greater than or equal to `1`")  # noqa: E501

        self._data = data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr in self.swagger_types:
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(EncodeData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EncodeData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
