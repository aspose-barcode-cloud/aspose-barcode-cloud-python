# coding: utf-8

import pprint
import re  # noqa: F401
import warnings  # noqa: F401

import six


class BarcodeResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {"barcode_value": "str", "type": "str", "region": "list[RegionPoint]", "checksum": "str"}

    attribute_map = {"barcode_value": "BarcodeValue", "type": "Type", "region": "Region", "checksum": "Checksum"}

    def __init__(self, barcode_value=None, type=None, region=None, checksum=None):  # noqa: E501
        """BarcodeResponse - a model defined in Swagger"""  # noqa: E501

        self._barcode_value = None
        self._type = None
        self._region = None
        self._checksum = None
        self.discriminator = None

        if barcode_value is not None:
            self.barcode_value = barcode_value
        if type is not None:
            self.type = type
        if region is not None:
            self.region = region
        if checksum is not None:
            self.checksum = checksum

    @property
    def barcode_value(self):
        """Gets the barcode_value of this BarcodeResponse.  # noqa: E501

        Barcode data.  # noqa: E501

        :return: The barcode_value of this BarcodeResponse.  # noqa: E501
        :rtype: str
        """
        return self._barcode_value

    @barcode_value.setter
    def barcode_value(self, barcode_value):
        """Sets the barcode_value of this BarcodeResponse.

        Barcode data.  # noqa: E501

        :param barcode_value: The barcode_value of this BarcodeResponse.  # noqa: E501
        :type: str
        """

        self._barcode_value = barcode_value

    @property
    def type(self):
        """Gets the type of this BarcodeResponse.  # noqa: E501

        Type of the barcode.  # noqa: E501

        :return: The type of this BarcodeResponse.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BarcodeResponse.

        Type of the barcode.  # noqa: E501

        :param type: The type of this BarcodeResponse.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def region(self):
        """Gets the region of this BarcodeResponse.  # noqa: E501

        Region with barcode.  # noqa: E501

        :return: The region of this BarcodeResponse.  # noqa: E501
        :rtype: list[RegionPoint]
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this BarcodeResponse.

        Region with barcode.  # noqa: E501

        :param region: The region of this BarcodeResponse.  # noqa: E501
        :type: list[RegionPoint]
        """

        self._region = region

    @property
    def checksum(self):
        """Gets the checksum of this BarcodeResponse.  # noqa: E501

        Checksum of barcode.  # noqa: E501

        :return: The checksum of this BarcodeResponse.  # noqa: E501
        :rtype: str
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """Sets the checksum of this BarcodeResponse.

        Checksum of barcode.  # noqa: E501

        :param checksum: The checksum of this BarcodeResponse.  # noqa: E501
        :type: str
        """

        self._checksum = checksum

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(BarcodeResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BarcodeResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
