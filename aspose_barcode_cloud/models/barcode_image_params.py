# coding: utf-8

import pprint
import re  # noqa: F401
import warnings  # noqa: F401


class BarcodeImageParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "image_format": "BarcodeImageFormat",
        "text_location": "CodeLocation",
        "foreground_color": "str",
        "background_color": "str",
        "units": "GraphicsUnit",
        "resolution": "float",
        "image_height": "float",
        "image_width": "float",
        "rotation_angle": "int",
    }

    attribute_map = {
        "image_format": "imageFormat",
        "text_location": "textLocation",
        "foreground_color": "foregroundColor",
        "background_color": "backgroundColor",
        "units": "units",
        "resolution": "resolution",
        "image_height": "imageHeight",
        "image_width": "imageWidth",
        "rotation_angle": "rotationAngle",
    }

    def __init__(
        self,
        image_format=None,
        text_location=None,
        foreground_color="Black",
        background_color="White",
        units=None,
        resolution=None,
        image_height=None,
        image_width=None,
        rotation_angle=None,
    ):  # noqa: E501
        """BarcodeImageParams - a model defined in Swagger"""  # noqa: E501

        self._image_format = None
        self._text_location = None
        self._foreground_color = None
        self._background_color = None
        self._units = None
        self._resolution = None
        self._image_height = None
        self._image_width = None
        self._rotation_angle = None
        self.discriminator = None

        if image_format is not None:
            self.image_format = image_format
        if text_location is not None:
            self.text_location = text_location
        if foreground_color is not None:
            self.foreground_color = foreground_color
        if background_color is not None:
            self.background_color = background_color
        if units is not None:
            self.units = units
        if resolution is not None:
            self.resolution = resolution
        if image_height is not None:
            self.image_height = image_height
        if image_width is not None:
            self.image_width = image_width
        if rotation_angle is not None:
            self.rotation_angle = rotation_angle

    @property
    def image_format(self):
        """Gets the image_format of this BarcodeImageParams.  # noqa: E501


        :return: The image_format of this BarcodeImageParams.  # noqa: E501
        :rtype: BarcodeImageFormat
        """
        return self._image_format

    @image_format.setter
    def image_format(self, image_format):
        """Sets the image_format of this BarcodeImageParams.


        :param image_format: The image_format of this BarcodeImageParams.  # noqa: E501
        :type: BarcodeImageFormat
        """

        self._image_format = image_format

    @property
    def text_location(self):
        """Gets the text_location of this BarcodeImageParams.  # noqa: E501


        :return: The text_location of this BarcodeImageParams.  # noqa: E501
        :rtype: CodeLocation
        """
        return self._text_location

    @text_location.setter
    def text_location(self, text_location):
        """Sets the text_location of this BarcodeImageParams.


        :param text_location: The text_location of this BarcodeImageParams.  # noqa: E501
        :type: CodeLocation
        """

        self._text_location = text_location

    @property
    def foreground_color(self):
        """Gets the foreground_color of this BarcodeImageParams.  # noqa: E501

        Specify the displaying bars and content Color.  Value: Color name from https://reference.aspose.com/drawing/net/system.drawing/color/ or ARGB value started with #.  For example: AliceBlue or #FF000000  Default value: Black.  # noqa: E501

        :return: The foreground_color of this BarcodeImageParams.  # noqa: E501
        :rtype: str
        """
        return self._foreground_color

    @foreground_color.setter
    def foreground_color(self, foreground_color):
        """Sets the foreground_color of this BarcodeImageParams.

        Specify the displaying bars and content Color.  Value: Color name from https://reference.aspose.com/drawing/net/system.drawing/color/ or ARGB value started with #.  For example: AliceBlue or #FF000000  Default value: Black.  # noqa: E501

        :param foreground_color: The foreground_color of this BarcodeImageParams.  # noqa: E501
        :type: str
        """

        self._foreground_color = foreground_color

    @property
    def background_color(self):
        """Gets the background_color of this BarcodeImageParams.  # noqa: E501

        Background color of the barcode image.  Value: Color name from https://reference.aspose.com/drawing/net/system.drawing/color/ or ARGB value started with #.  For example: AliceBlue or #FF000000  Default value: White.  # noqa: E501

        :return: The background_color of this BarcodeImageParams.  # noqa: E501
        :rtype: str
        """
        return self._background_color

    @background_color.setter
    def background_color(self, background_color):
        """Sets the background_color of this BarcodeImageParams.

        Background color of the barcode image.  Value: Color name from https://reference.aspose.com/drawing/net/system.drawing/color/ or ARGB value started with #.  For example: AliceBlue or #FF000000  Default value: White.  # noqa: E501

        :param background_color: The background_color of this BarcodeImageParams.  # noqa: E501
        :type: str
        """

        self._background_color = background_color

    @property
    def units(self):
        """Gets the units of this BarcodeImageParams.  # noqa: E501


        :return: The units of this BarcodeImageParams.  # noqa: E501
        :rtype: GraphicsUnit
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this BarcodeImageParams.


        :param units: The units of this BarcodeImageParams.  # noqa: E501
        :type: GraphicsUnit
        """

        self._units = units

    @property
    def resolution(self):
        """Gets the resolution of this BarcodeImageParams.  # noqa: E501

        Resolution of the BarCode image.  One value for both dimensions.  Default value: 96 dpi.  Decimal separator is dot.  # noqa: E501

        :return: The resolution of this BarcodeImageParams.  # noqa: E501
        :rtype: float
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this BarcodeImageParams.

        Resolution of the BarCode image.  One value for both dimensions.  Default value: 96 dpi.  Decimal separator is dot.  # noqa: E501

        :param resolution: The resolution of this BarcodeImageParams.  # noqa: E501
        :type: float
        """
        if resolution is not None and resolution > 100000:  # noqa: E501
            raise ValueError(
                "Invalid value for `resolution`, must be a value less than or equal to `100000`"
            )  # noqa: E501
        if resolution is not None and resolution < 1:  # noqa: E501
            raise ValueError(
                "Invalid value for `resolution`, must be a value greater than or equal to `1`"
            )  # noqa: E501

        self._resolution = resolution

    @property
    def image_height(self):
        """Gets the image_height of this BarcodeImageParams.  # noqa: E501

        Height of the barcode image in given units. Default units: pixel.  Decimal separator is dot.  # noqa: E501

        :return: The image_height of this BarcodeImageParams.  # noqa: E501
        :rtype: float
        """
        return self._image_height

    @image_height.setter
    def image_height(self, image_height):
        """Sets the image_height of this BarcodeImageParams.

        Height of the barcode image in given units. Default units: pixel.  Decimal separator is dot.  # noqa: E501

        :param image_height: The image_height of this BarcodeImageParams.  # noqa: E501
        :type: float
        """

        self._image_height = image_height

    @property
    def image_width(self):
        """Gets the image_width of this BarcodeImageParams.  # noqa: E501

        Width of the barcode image in given units. Default units: pixel.  Decimal separator is dot.  # noqa: E501

        :return: The image_width of this BarcodeImageParams.  # noqa: E501
        :rtype: float
        """
        return self._image_width

    @image_width.setter
    def image_width(self, image_width):
        """Sets the image_width of this BarcodeImageParams.

        Width of the barcode image in given units. Default units: pixel.  Decimal separator is dot.  # noqa: E501

        :param image_width: The image_width of this BarcodeImageParams.  # noqa: E501
        :type: float
        """

        self._image_width = image_width

    @property
    def rotation_angle(self):
        """Gets the rotation_angle of this BarcodeImageParams.  # noqa: E501

        BarCode image rotation angle, measured in degree, e.g. RotationAngle = 0 or RotationAngle = 360 means no rotation.  If RotationAngle NOT equal to 90, 180, 270 or 0, it may increase the difficulty for the scanner to read the image.  Default value: 0.  # noqa: E501

        :return: The rotation_angle of this BarcodeImageParams.  # noqa: E501
        :rtype: int
        """
        return self._rotation_angle

    @rotation_angle.setter
    def rotation_angle(self, rotation_angle):
        """Sets the rotation_angle of this BarcodeImageParams.

        BarCode image rotation angle, measured in degree, e.g. RotationAngle = 0 or RotationAngle = 360 means no rotation.  If RotationAngle NOT equal to 90, 180, 270 or 0, it may increase the difficulty for the scanner to read the image.  Default value: 0.  # noqa: E501

        :param rotation_angle: The rotation_angle of this BarcodeImageParams.  # noqa: E501
        :type: int
        """

        self._rotation_angle = rotation_angle

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr in self.swagger_types:
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(BarcodeImageParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BarcodeImageParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
