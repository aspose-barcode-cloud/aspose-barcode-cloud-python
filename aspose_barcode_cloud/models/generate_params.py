# coding: utf-8

import pprint
import re  # noqa: F401
import warnings  # noqa: F401


class GenerateParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "barcode_type": "EncodeBarcodeType",
        "encode_data": "EncodeData",
        "barcode_image_params": "BarcodeImageParams",
    }

    attribute_map = {
        "barcode_type": "barcodeType",
        "encode_data": "encodeData",
        "barcode_image_params": "barcodeImageParams",
    }

    def __init__(self, barcode_type=None, encode_data=None, barcode_image_params=None):  # noqa: E501
        """GenerateParams - a model defined in Swagger"""  # noqa: E501

        self._barcode_type = None
        self._encode_data = None
        self._barcode_image_params = None
        self.discriminator = None

        self.barcode_type = barcode_type
        self.encode_data = encode_data
        if barcode_image_params is not None:
            self.barcode_image_params = barcode_image_params

    @property
    def barcode_type(self):
        """Gets the barcode_type of this GenerateParams.  # noqa: E501


        :return: The barcode_type of this GenerateParams.  # noqa: E501
        :rtype: EncodeBarcodeType
        """
        return self._barcode_type

    @barcode_type.setter
    def barcode_type(self, barcode_type):
        """Sets the barcode_type of this GenerateParams.


        :param barcode_type: The barcode_type of this GenerateParams.  # noqa: E501
        :type: EncodeBarcodeType
        """
        if barcode_type is None:
            raise ValueError("Invalid value for `barcode_type`, must not be `None`")  # noqa: E501

        self._barcode_type = barcode_type

    @property
    def encode_data(self):
        """Gets the encode_data of this GenerateParams.  # noqa: E501


        :return: The encode_data of this GenerateParams.  # noqa: E501
        :rtype: EncodeData
        """
        return self._encode_data

    @encode_data.setter
    def encode_data(self, encode_data):
        """Sets the encode_data of this GenerateParams.


        :param encode_data: The encode_data of this GenerateParams.  # noqa: E501
        :type: EncodeData
        """
        if encode_data is None:
            raise ValueError("Invalid value for `encode_data`, must not be `None`")  # noqa: E501

        self._encode_data = encode_data

    @property
    def barcode_image_params(self):
        """Gets the barcode_image_params of this GenerateParams.  # noqa: E501


        :return: The barcode_image_params of this GenerateParams.  # noqa: E501
        :rtype: BarcodeImageParams
        """
        return self._barcode_image_params

    @barcode_image_params.setter
    def barcode_image_params(self, barcode_image_params):
        """Sets the barcode_image_params of this GenerateParams.


        :param barcode_image_params: The barcode_image_params of this GenerateParams.  # noqa: E501
        :type: BarcodeImageParams
        """

        self._barcode_image_params = barcode_image_params

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr in self.swagger_types:
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(GenerateParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GenerateParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
