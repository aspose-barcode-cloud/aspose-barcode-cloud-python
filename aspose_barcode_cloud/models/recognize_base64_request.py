# coding: utf-8

import pprint
import re  # noqa: F401
import warnings  # noqa: F401


class RecognizeBase64Request(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "barcode_types": "List[DecodeBarcodeType]",
        "file_base64": "str",
        "recognition_mode": "RecognitionMode",
        "recognition_image_kind": "RecognitionImageKind",
    }

    attribute_map = {
        "barcode_types": "barcodeTypes",
        "file_base64": "fileBase64",
        "recognition_mode": "recognitionMode",
        "recognition_image_kind": "recognitionImageKind",
    }

    def __init__(
        self, barcode_types=None, file_base64=None, recognition_mode=None, recognition_image_kind=None
    ):  # noqa: E501
        """RecognizeBase64Request - a model defined in Swagger"""  # noqa: E501

        self._barcode_types = None
        self._file_base64 = None
        self._recognition_mode = None
        self._recognition_image_kind = None
        self.discriminator = None

        self.barcode_types = barcode_types
        self.file_base64 = file_base64
        if recognition_mode is not None:
            self.recognition_mode = recognition_mode
        if recognition_image_kind is not None:
            self.recognition_image_kind = recognition_image_kind

    @property
    def barcode_types(self):
        """Gets the barcode_types of this RecognizeBase64Request.  # noqa: E501

        Array of decode types to find on barcode  # noqa: E501

        :return: The barcode_types of this RecognizeBase64Request.  # noqa: E501
        :rtype: List[DecodeBarcodeType]
        """
        return self._barcode_types

    @barcode_types.setter
    def barcode_types(self, barcode_types):
        """Sets the barcode_types of this RecognizeBase64Request.

        Array of decode types to find on barcode  # noqa: E501

        :param barcode_types: The barcode_types of this RecognizeBase64Request.  # noqa: E501
        :type: List[DecodeBarcodeType]
        """
        if barcode_types is None:
            raise ValueError("Invalid value for `barcode_types`, must not be `None`")  # noqa: E501

        self._barcode_types = barcode_types

    @property
    def file_base64(self):
        """Gets the file_base64 of this RecognizeBase64Request.  # noqa: E501

        Barcode image bytes encoded as base-64.  # noqa: E501

        :return: The file_base64 of this RecognizeBase64Request.  # noqa: E501
        :rtype: str
        """
        return self._file_base64

    @file_base64.setter
    def file_base64(self, file_base64):
        """Sets the file_base64 of this RecognizeBase64Request.

        Barcode image bytes encoded as base-64.  # noqa: E501

        :param file_base64: The file_base64 of this RecognizeBase64Request.  # noqa: E501
        :type: str
        """
        if file_base64 is None:
            raise ValueError("Invalid value for `file_base64`, must not be `None`")  # noqa: E501
        if file_base64 is not None and len(file_base64) > 28730982:
            raise ValueError(
                "Invalid value for `file_base64`, length must be less than or equal to `28730982`"
            )  # noqa: E501
        if file_base64 is not None and len(file_base64) < 1:
            raise ValueError(
                "Invalid value for `file_base64`, length must be greater than or equal to `1`"
            )  # noqa: E501

        self._file_base64 = file_base64

    @property
    def recognition_mode(self):
        """Gets the recognition_mode of this RecognizeBase64Request.  # noqa: E501


        :return: The recognition_mode of this RecognizeBase64Request.  # noqa: E501
        :rtype: RecognitionMode
        """
        return self._recognition_mode

    @recognition_mode.setter
    def recognition_mode(self, recognition_mode):
        """Sets the recognition_mode of this RecognizeBase64Request.


        :param recognition_mode: The recognition_mode of this RecognizeBase64Request.  # noqa: E501
        :type: RecognitionMode
        """

        self._recognition_mode = recognition_mode

    @property
    def recognition_image_kind(self):
        """Gets the recognition_image_kind of this RecognizeBase64Request.  # noqa: E501


        :return: The recognition_image_kind of this RecognizeBase64Request.  # noqa: E501
        :rtype: RecognitionImageKind
        """
        return self._recognition_image_kind

    @recognition_image_kind.setter
    def recognition_image_kind(self, recognition_image_kind):
        """Sets the recognition_image_kind of this RecognizeBase64Request.


        :param recognition_image_kind: The recognition_image_kind of this RecognizeBase64Request.  # noqa: E501
        :type: RecognitionImageKind
        """

        self._recognition_image_kind = recognition_image_kind

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr in self.swagger_types:
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(RecognizeBase64Request, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecognizeBase64Request):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
