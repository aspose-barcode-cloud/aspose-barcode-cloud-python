# coding: utf-8

import pprint
import re  # noqa: F401
import warnings  # noqa: F401


class EncodeBarcodeType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    QR = "QR"
    AUSTRALIAPOST = "AustraliaPost"
    AUSTRALIANPOSTEPARCEL = "AustralianPosteParcel"
    AZTEC = "Aztec"
    CODABAR = "Codabar"
    CODABLOCKF = "CodablockF"
    CODE11 = "Code11"
    CODE128 = "Code128"
    CODE16K = "Code16K"
    CODE32 = "Code32"
    CODE39 = "Code39"
    CODE39FULLASCII = "Code39FullASCII"
    CODE93 = "Code93"
    DATALOGIC2OF5 = "DataLogic2of5"
    DATAMATRIX = "DataMatrix"
    DATABAREXPANDED = "DatabarExpanded"
    DATABAREXPANDEDSTACKED = "DatabarExpandedStacked"
    DATABARLIMITED = "DatabarLimited"
    DATABAROMNIDIRECTIONAL = "DatabarOmniDirectional"
    DATABARSTACKED = "DatabarStacked"
    DATABARSTACKEDOMNIDIRECTIONAL = "DatabarStackedOmniDirectional"
    DATABARTRUNCATED = "DatabarTruncated"
    DEUTSCHEPOSTIDENTCODE = "DeutschePostIdentcode"
    DEUTSCHEPOSTLEITCODE = "DeutschePostLeitcode"
    DOTCODE = "DotCode"
    DUTCHKIX = "DutchKIX"
    EAN13 = "EAN13"
    EAN14 = "EAN14"
    EAN8 = "EAN8"
    GS1AZTEC = "GS1Aztec"
    GS1CODABLOCKF = "GS1CodablockF"
    GS1CODE128 = "GS1Code128"
    GS1DATAMATRIX = "GS1DataMatrix"
    GS1DOTCODE = "GS1DotCode"
    GS1HANXIN = "GS1HanXin"
    GS1MICROPDF417 = "GS1MicroPdf417"
    GS1QR = "GS1QR"
    HANXIN = "HanXin"
    IATA2OF5 = "IATA2of5"
    ISBN = "ISBN"
    ISMN = "ISMN"
    ISSN = "ISSN"
    ITF14 = "ITF14"
    ITF6 = "ITF6"
    INTERLEAVED2OF5 = "Interleaved2of5"
    ITALIANPOST25 = "ItalianPost25"
    MSI = "MSI"
    MACROPDF417 = "MacroPdf417"
    MAILMARK = "Mailmark"
    MATRIX2OF5 = "Matrix2of5"
    MAXICODE = "MaxiCode"
    MICROPDF417 = "MicroPdf417"
    MICROQR = "MicroQR"
    OPC = "OPC"
    ONECODE = "OneCode"
    PZN = "PZN"
    PATCHCODE = "PatchCode"
    PDF417 = "Pdf417"
    PHARMACODE = "Pharmacode"
    PLANET = "Planet"
    POSTNET = "Postnet"
    RM4SCC = "RM4SCC"
    RECTMICROQR = "RectMicroQR"
    SCC14 = "SCC14"
    SSCC18 = "SSCC18"
    SINGAPOREPOST = "SingaporePost"
    STANDARD2OF5 = "Standard2of5"
    SWISSPOSTPARCEL = "SwissPostParcel"
    UPCA = "UPCA"
    UPCE = "UPCE"
    UPCAGS1CODE128COUPON = "UpcaGs1Code128Coupon"
    UPCAGS1DATABARCOUPON = "UpcaGs1DatabarCoupon"
    VIN = "VIN"

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {}

    attribute_map = {}

    def __init__(self):  # noqa: E501
        """EncodeBarcodeType - a model defined in Swagger"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr in self.swagger_types:
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(EncodeBarcodeType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EncodeBarcodeType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
