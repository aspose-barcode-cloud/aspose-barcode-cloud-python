# coding: utf-8

"""

    Copyright (c) 2023 Aspose.BarCode for Cloud

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in all
 copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 SOFTWARE.

"""


import pprint
import re  # noqa: F401

import six


class DotCodeParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "aspect_ratio": "float",
        "columns": "int",
        "encode_mode": "DotCodeEncodeMode",
        "eci_encoding": "ECIEncodings",
        "is_reader_initialization": "bool",
        "rows": "int",
    }

    attribute_map = {
        "aspect_ratio": "AspectRatio",
        "columns": "Columns",
        "encode_mode": "EncodeMode",
        "eci_encoding": "ECIEncoding",
        "is_reader_initialization": "IsReaderInitialization",
        "rows": "Rows",
    }

    def __init__(
        self,
        aspect_ratio=None,
        columns=None,
        encode_mode=None,
        eci_encoding=None,
        is_reader_initialization=None,
        rows=None,
    ):  # noqa: E501
        """DotCodeParams - a model defined in Swagger"""  # noqa: E501

        self._aspect_ratio = None
        self._columns = None
        self._encode_mode = None
        self._eci_encoding = None
        self._is_reader_initialization = None
        self._rows = None
        self.discriminator = None

        if aspect_ratio is not None:
            self.aspect_ratio = aspect_ratio
        if columns is not None:
            self.columns = columns
        if encode_mode is not None:
            self.encode_mode = encode_mode
        if eci_encoding is not None:
            self.eci_encoding = eci_encoding
        if is_reader_initialization is not None:
            self.is_reader_initialization = is_reader_initialization
        if rows is not None:
            self.rows = rows

    @property
    def aspect_ratio(self):
        """Gets the aspect_ratio of this DotCodeParams.  # noqa: E501

        Height/Width ratio of 2D BarCode module.  # noqa: E501

        :return: The aspect_ratio of this DotCodeParams.  # noqa: E501
        :rtype: float
        """
        return self._aspect_ratio

    @aspect_ratio.setter
    def aspect_ratio(self, aspect_ratio):
        """Sets the aspect_ratio of this DotCodeParams.

        Height/Width ratio of 2D BarCode module.  # noqa: E501

        :param aspect_ratio: The aspect_ratio of this DotCodeParams.  # noqa: E501
        :type: float
        """

        self._aspect_ratio = aspect_ratio

    @property
    def columns(self):
        """Gets the columns of this DotCodeParams.  # noqa: E501

        Identifies columns count. Sum of the number of rows plus the number of columns of a DotCode symbol must be odd. Number of columns must be at least 5.  # noqa: E501

        :return: The columns of this DotCodeParams.  # noqa: E501
        :rtype: int
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this DotCodeParams.

        Identifies columns count. Sum of the number of rows plus the number of columns of a DotCode symbol must be odd. Number of columns must be at least 5.  # noqa: E501

        :param columns: The columns of this DotCodeParams.  # noqa: E501
        :type: int
        """

        self._columns = columns

    @property
    def encode_mode(self):
        """Gets the encode_mode of this DotCodeParams.  # noqa: E501

        Identifies DotCode encode mode. Default value: Auto.  # noqa: E501

        :return: The encode_mode of this DotCodeParams.  # noqa: E501
        :rtype: DotCodeEncodeMode
        """
        return self._encode_mode

    @encode_mode.setter
    def encode_mode(self, encode_mode):
        """Sets the encode_mode of this DotCodeParams.

        Identifies DotCode encode mode. Default value: Auto.  # noqa: E501

        :param encode_mode: The encode_mode of this DotCodeParams.  # noqa: E501
        :type: DotCodeEncodeMode
        """

        self._encode_mode = encode_mode

    @property
    def eci_encoding(self):
        """Gets the eci_encoding of this DotCodeParams.  # noqa: E501

        Identifies ECI encoding. Used when DotCodeEncodeMode is Auto. Default value: ISO-8859-1.  # noqa: E501

        :return: The eci_encoding of this DotCodeParams.  # noqa: E501
        :rtype: ECIEncodings
        """
        return self._eci_encoding

    @eci_encoding.setter
    def eci_encoding(self, eci_encoding):
        """Sets the eci_encoding of this DotCodeParams.

        Identifies ECI encoding. Used when DotCodeEncodeMode is Auto. Default value: ISO-8859-1.  # noqa: E501

        :param eci_encoding: The eci_encoding of this DotCodeParams.  # noqa: E501
        :type: ECIEncodings
        """

        self._eci_encoding = eci_encoding

    @property
    def is_reader_initialization(self):
        """Gets the is_reader_initialization of this DotCodeParams.  # noqa: E501

        Indicates whether code is used for instruct reader to interpret the following data as instructions for initialization or reprogramming of the bar code reader. Default value is false.  # noqa: E501

        :return: The is_reader_initialization of this DotCodeParams.  # noqa: E501
        :rtype: bool
        """
        return self._is_reader_initialization

    @is_reader_initialization.setter
    def is_reader_initialization(self, is_reader_initialization):
        """Sets the is_reader_initialization of this DotCodeParams.

        Indicates whether code is used for instruct reader to interpret the following data as instructions for initialization or reprogramming of the bar code reader. Default value is false.  # noqa: E501

        :param is_reader_initialization: The is_reader_initialization of this DotCodeParams.  # noqa: E501
        :type: bool
        """

        self._is_reader_initialization = is_reader_initialization

    @property
    def rows(self):
        """Gets the rows of this DotCodeParams.  # noqa: E501

        Identifies rows count. Sum of the number of rows plus the number of columns of a DotCode symbol must be odd. Number of rows must be at least 5.  # noqa: E501

        :return: The rows of this DotCodeParams.  # noqa: E501
        :rtype: int
        """
        return self._rows

    @rows.setter
    def rows(self, rows):
        """Sets the rows of this DotCodeParams.

        Identifies rows count. Sum of the number of rows plus the number of columns of a DotCode symbol must be odd. Number of rows must be at least 5.  # noqa: E501

        :param rows: The rows of this DotCodeParams.  # noqa: E501
        :type: int
        """

        self._rows = rows

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(DotCodeParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DotCodeParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
